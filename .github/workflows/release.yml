name: Release/Build/Deploy
on:
  workflow_dispatch:

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get branch name
        id: get_branch_name
        shell: bash
        run: |
          echo "Version hex dump:"
          grep "version" version.toml | awk -F'"' '{print $2}' | xxd
          echo "📖 Reading version from version.toml..."
          version=$(grep "__version__" version.toml | awk -F'"' '{print $2}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "📌 Found version: '${version}'"
          branch_name="release-${version}"
          echo "🔄 Creating branch name: ${branch_name}"
          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV
          echo "✅ Branch Name $branch_name created successfully"
      - name: Check if branch exists
        run: |
          echo "🔍 Debug: Full branch name to check: 'refs/heads/${BRANCH_NAME}'"
          branch_check=$(git ls-remote --heads origin "refs/heads/${BRANCH_NAME}")
          exit_code=$?
          echo "🔍 Debug: git ls-remote output: '${branch_check}'"
          echo "🔍 Debug: git ls-remote exit code: ${exit_code}"
          echo "🔍 Checking if branch ${{ env.BRANCH_NAME }} already exists..."
          if [ -n "${branch_check}" ]; then
            echo "❌ Branch ${{ env.BRANCH_NAME }} already exists!"
            echo "This likely means one of:"
            echo "  1. This version was already released"
            echo "  2. The version number in version.toml needs to be incremented"
            echo "  3. An old release branch needs to be cleaned up"
            echo "::error::Branch ${{ env.BRANCH_NAME }} already exists!" >> $GITHUB_STEP_SUMMARY
            echo "This likely means one of:" >> $GITHUB_STEP_SUMMARY
            echo "  1. This version was already released" >> $GITHUB_STEP_SUMMARY
            echo "  2. The version number in version.toml needs to be incremented" >> $GITHUB_STEP_SUMMARY
            echo "  3. An old release branch needs to be cleaned up" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "✅ Branch does not exist, proceeding with creation"
      - name: Create release branch
        run: |
          echo "🔄 Checking out main branch..."
          git checkout main
          echo "🌱 Creating new branch: ${{ env.BRANCH_NAME }}"
          git checkout -b ${{ env.BRANCH_NAME }}
          echo "⬆️ Pushing branch to origin..."
          git push origin ${{ env.BRANCH_NAME }}
          echo "✅ Branch successfully pushed to origin"
      - name: Post creation summary
        run: |
          echo "📝 Generating creation summary..."
          echo "✅ Branch ${{ env.BRANCH_NAME }} created successfully"
          echo "Created from: main"
          echo "Created by: ${{ github.actor }}"
          echo "Created at: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "📝 Adding summary to job output..."
          echo "✅ Branch ${{ env.BRANCH_NAME }} created successfully" >> $GITHUB_STEP_SUMMARY
          echo "Created from: main" >> $GITHUB_STEP_SUMMARY
          echo "Created by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Created at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

  cleanup-old-branches:
    needs: create-release
    runs-on: ubuntu-latest
    env:
      ROLLBACK_NUMBER: ${{ vars.VERSION_ROLLBACK_NUMBER }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cleanup old release branches
        run: |
          echo "🔍 Starting cleanup process..."
          echo "📊 Rollback number set to: $ROLLBACK_NUMBER"
          echo "📝 Getting list of release branches..."
          release_branches=$(git for-each-ref --sort=-creatordate --format '%(refname:short)' refs/remotes/origin | grep '^origin/release-' | sed 's|origin/||')
          echo "📋 Converting branch list to array..."
          mapfile -t branch_array <<< "$release_branches"
          echo "📊 Found release branches (sorted by date, newest first):"
          for branch in "${branch_array[@]}"; do
            echo "  - $branch"
          done
          keep_count=$ROLLBACK_NUMBER
          total_branches=${#branch_array[@]}
          echo "📈 Total branches found: $total_branches"
          echo "🎯 Branches to keep: $keep_count"
          if [ $total_branches -gt $keep_count ]; then
            echo "🔄 Found $total_branches release branches, keeping newest $keep_count"
            echo "📝 Branches to be kept:"
            for ((i=0; i<keep_count; i++)); do
              echo "  ✅ Keeping: ${branch_array[i]}"
            done
            echo " 🗑️ Branches to be deleted:"
            echo " 🗑️ Branches to be deleted:" >>  $GITHUB_STEP_SUMMARY
            for ((i=keep_count; i<total_branches; i++)); do
              branch="${branch_array[i]}"
              echo "  ❌ Deleting: $branch"
              git push origin --delete "$branch"
              if [ $? -eq 0 ]; then
                echo "    ✅ Successfully deleted $branch"
                echo "    ✅ Successfully deleted $branch" >> $GITHUB_STEP_SUMMARY
              else
                echo "    ❌ Failed to delete $branch"
                echo "    ❌ Failed to delete $branch" >> $GITHUB_STEP_SUMMARY
              fi
            done
          else
            echo "✅ Only found $total_branches release branches, no cleanup needed"
            echo "✅ Only found $total_branches release branches, no cleanup needed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "🎉 Cleanup process completed!"
          echo "🎉 Cleanup process completed!" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-publish:
    needs: cleanup-old-branches
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install -y gettext
      - uses: actions/setup-python@v5
      - uses: actions/setup-node@v4
      - uses: actions/checkout@v4
      - name: Extract version
        id: get_version
        run: |
          echo "📖 Reading version from version.toml..."
          version=$(grep "__version__" version.toml | awk -F'"' '{print $2}' | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          echo "📌 Found version: '${version}'"
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "✅ Version extracted successfully"
          echo "📝 Build Process Started" >> $GITHUB_STEP_SUMMARY
          echo "Version extracted: ${version}" >> $GITHUB_STEP_SUMMARY
      - name: Install Javascript dependencies
        working-directory: ./django_ckeditors
        run: npm install
      - name: Build ck-editor
        working-directory: ./django_ckeditors
        run: npm run prod
      - name: Install Python dependencies
        run: python -m pip install --upgrade pip build wheel twine
      - name: Build dist packages
        run: python -m build --sdist --wheel
      - name: Upload packages
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      - name: Verify PyPI deployment
        run: |
          echo "🔍 Verifying package deployment on PyPI..."
          # Extract package name from setup.py or pyproject.toml
          PACKAGE_NAME=$(python setup.py --name 2>/dev/null || grep "name" pyproject.toml | head -n1 | awk -F'"' '{print $2}' || echo "")
          if [ -z "$PACKAGE_NAME" ]; then
            echo "❌ Failed to extract package name"
            exit 1
          fi

          echo "📦 Package name: ${PACKAGE_NAME}"
          echo "📌 Version to verify: ${VERSION}"

          # Wait for PyPI to process the upload (initial delay)
          echo "⏳ Waiting for PyPI to process the upload..."
          sleep 30

          # Try up to 5 times with increasing delays
          for i in {1..5}; do
            echo "🔄 Attempt $i to verify package..."
            if curl -s "https://pypi.org/pypi/${PACKAGE_NAME}/${VERSION}/json" | grep -q "version\":\"${VERSION}\""; then
              echo "✅ Package ${PACKAGE_NAME} version ${VERSION} successfully verified on PyPI"
              echo "✅ Package verified on PyPI" >> $GITHUB_STEP_SUMMARY
              echo "  Package: ${PACKAGE_NAME}" >> $GITHUB_STEP_SUMMARY
              echo "  Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
              exit 0
            else
              echo "⏳ Package not found yet, waiting..."
              sleep $((i * 10))  # Incremental backoff
            fi
          done

          echo "❌ Failed to verify package on PyPI after multiple attempts"
          echo "❌ PyPI verification failed" >> $GITHUB_STEP_SUMMARY
          exit 1
      - name: Build Summary
        if: always()
        run: |
          echo "📝 Final Build Summary:" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "Version: ${VERSION}" >> $GITHUB_STEP_SUMMARY
          echo "Built by: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "Built at: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY

